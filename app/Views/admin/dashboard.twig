{% extends 'base.twig' %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        
        {% include 'admin/include/adminMenu.twig' %}

        <!-- Main Content -->
        <main class="col-md-12 ms-sm-auto col-lg-10 px-md-4">
            <!-- Header Section -->
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2"><i class="fas fa-tachometer-alt me-2"></i> Panel Administrateur</h1>
            </div>

            {# Feedback inline #}
            {% if flash_message %}
              <div class="alert alert-{{ flash_type|default('info') }} alert-dismissible fade show" role="alert">
                {{ flash_message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
              </div>
            {% endif %}

            {% if config('SITE.show_informations_details.value') %}

            <div class="card shadow-sm mb-4">
                <div class="card-header bg-dark text-white">
                    <h5><i class="fas fa-server me-2"></i> Statut du Serveur</h5>
                </div>

                
                <div class="card-body">
                    <table class="table table-striped table-bordered">
                        <tbody>
                            <tr>
                                <th scope="row">Date du dernier redémarrage du serveur</th>
                                <td>{{ server_status.server_uptime }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Statut MySQL</th>
                                <td>
                                    {% if server_status.mysql %}
                                        <span class="badge bg-success"><i class="fas fa-check"></i> Connecté</span>
                                    {% else %}
                                        <span class="badge bg-danger"><i class="fas fa-times"></i> Déconnecté</span>
                                    {% endif %}
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Version de MySQL</th>
                                <td>{{ server_status.mysql_version }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Version PHP</th>
                                <td>{{ server_status.php_version }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Système d'exploitation</th>
                                <td>{{ server_status.os }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Serveur Web</th>
                                <td>{{ server_status.server_software }}</td>
                            </tr>
                            <tr>
                                <th scope="row">IP du Serveur</th>
                                <td>{{ server_status.server_ip }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Nombre de processus Apache actifs</th>
                                <td>{{ server_status.apache_processes }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Temps d'exécution maximum</th>
                                <td>{{ server_status.max_execution_time }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Taille maximale de téléchargement</th>
                                <td>{{ server_status.upload_max_filesize }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Taille maximale des requêtes POST</th>
                                <td>{{ server_status.post_max_size }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Temps de réponse du serveur</th>
                                <td>{{ server_status.response_time }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Nombre de requêtes MySQL actives</th>
                                <td>{{ server_status.mysql_active_queries }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Usage de la mémoire PHP</th>
                                <td>{{ server_status.php_memory_usage }}</td>
                            </tr>
                            <tr>
                                <th scope="row">Nombre de fichiers ouverts par PHP</th>
                                <td>{{ server_status.open_files }}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            {% endif %}


            <!-- Dashboard Stats -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-dark text-white">
                    <h5><i class="fas fa-tachometer-alt me-2"></i> Statistiques du Dashboard</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered">
                            <tbody>
                                <tr class="table-primary">
                                    <td><i class="fas fa-users fa-fw"></i> Nombre d'utilisateurs</td>
                                    <td>{{ users_count }}</td>
                                </tr>
                                <tr class="table-success">
                                    <td><i class="fas fa-book fa-fw"></i> Total de logs</td>
                                    <td>{{ log_count }}</td>
                                </tr>
                                <tr class="table-warning">
                                    <td><i class="fas fa-exclamation-triangle fa-fw"></i> Avertissements</td>
                                    <td>{{ log_count_warning }}</td>
                                </tr>
                                <tr class="table-danger">
                                    <td><i class="fas fa-exclamation-triangle fa-fw"></i> Erreurs</td>
                                    <td>{{ log_count_error }}</td>
                                </tr>
                                <tr class="table-danger">
                                    <td><i class="fas fa-exclamation-triangle fa-fw"></i> Problèmes critiques</td>
                                    <td>{{ log_count_critical }}</td>
                                </tr>
                                <tr class="table-secondary">
                                    <td><i class="fas fa-tools fa-fw"></i> Débug</td>
                                    <td>{{ log_count_debug }}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            {# ---- LOGS : Erreurs récentes + Actions ---- #}
            <div class="card shadow-sm mb-4">
              <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-bug me-2"></i> Erreurs récentes</h5>
              </div>
              <div class="card-body">
                <ul class="nav nav-pills mb-3" id="logsLevelTabs">
                  <li class="nav-item"><button class="nav-link active" data-level="SUCCESS">SUCCESS</button></li>
                  <li class="nav-item"><button class="nav-link" data-level="ERROR">ERROR</button></li>
                  <li class="nav-item"><button class="nav-link" data-level="CRITICAL">CRITICAL</button></li>
                  <li class="nav-item"><button class="nav-link" data-level="WARNING">WARNING</button></li>
                  <li class="nav-item"><button class="nav-link" data-level="DEBUG">DEBUG</button></li>
                </ul>

                <div class="table-responsive">
                  <table class="table table-striped table-bordered">
                    <thead>
                      <tr>
                        <th style="width:90px">ID</th>
                        <th style="width:120px">Niveau</th>
                        <th style="width:160px">Catégorie</th>
                        <th>Message</th>
                      </tr>
                    </thead>
                    <tbody id="logsLastBody">
                      <tr><td colspan="4" class="text-muted">Chargement…</td></tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            {# ---- LOGS : Répartition par niveaux (camembert) ---- #}
            <div class="card shadow-sm mb-4">
              <div class="card-header bg-dark text-white">
                <h5 class="mb-0"><i class="fas fa-chart-pie me-2"></i> Répartition des niveaux de logs</h5>
              </div>
              <div class="card-body">
                <div style="height: 360px;">
                  <canvas id="logsPie"></canvas>
                </div>
              </div>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="card-header bg-dark text-white">
                    <h5><i class="fas fa-bolt me-2"></i> Actions rapides</h5>
                </div>
                <div class="card-body">
                    {% set hasActions = false %}
                    <ul class="list-group">
                        {% if checkPerm('manage_database') %}
                            {% set hasActions = true %}
                            <li class="list-group-item text-muted">
                                {# Bouton « Effacer tous les logs » – en POST avec token CSRF #}
                                <form method="POST" action="{{ url }}/admin/clearlogs" 
                                      onsubmit="return confirm('Êtes-vous sûr·e de vouloir supprimer *tous* les logs ?');"
                                      class="d-inline me-2">
                                    <input type="hidden" name="csrf_token" value="{{ csrf_token|e('html_attr') }}">
                                    <button type="submit" class="btn btn-danger btn-sm">
                                        <i class="fas fa-trash-alt me-1"></i> Effacer tous les logs
                                    </button>
                                </form>
                            </li>
                        {% endif %}
                    </ul>

                    {% if not hasActions %}
                        <p class="text-muted fst-italic mb-0">Aucune action rapide n’est disponible avec vos permissions.</p>
                    {% endif %}
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="card shadow-sm mb-4 mt-3">
                <div class="card-header bg-dark text-white">
                    <h5><i class="fas fa-history me-2"></i> Activité Récente</h5>
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        {% if log_recent_activity is not empty %}
                            {% for log_activity in log_recent_activity %}
                                <li class="list-group-item">{{ log_activity.MESSAGE }}</li>
                            {% endfor %}
                        {% else %}
                            <li class="list-group-item text-muted">Aucune activité trouvée</li>
                        {% endif %}
                    </ul>
                </div>
            </div>

            <!-- Section pour les graphiques -->
            <div class="row">
                <!-- Premier graphique -->
                <div class="col-12 mb-4">
                    <div class="card shadow-sm"> <!-- Utilisation de la classe h-100 pour que la carte prenne toute la hauteur disponible -->
                        <div class="card-header bg-dark text-white">
                            <h5><i class="fas fa-chart-bar me-2"></i> Visiteurs par mois sur {{ date | date('Y') }} </h5>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <canvas id="visitorChart" class="flex-fill"></canvas> <!-- Utilisation de flex-fill pour faire prendre toute la hauteur disponible au canvas -->
                        </div>
                    </div>
                </div>

                <!-- Deuxième graphique -->
                <div class="col-12">
                    <div class="card shadow-sm"> <!-- Utilisation de la classe h-100 pour que la carte prenne toute la hauteur disponible -->
                        <div class="card-header bg-dark text-white">
                            <h5><i class="fas fa-chart-bar me-2"></i> Pages visitées par mois sur {{ date | date('Y') }}</h5>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <canvas id="pageChart" class="flex-fill"></canvas> <!-- Utilisation de flex-fill pour faire prendre toute la hauteur disponible au canvas -->
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>
{% endblock %}

{% block jquery %}
<!-- Inclure Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- Script pour récupérer les données PHP et afficher les graphiques -->
<script>
$(document).ready(function() 
{
    // Récupérer les données PHP via AJAX
    $.ajax({
        url: '{{url}}/admin/ajax/dashboard',
        type: 'GET',
        success: function(response) 
        {
            var data = JSON.parse(response);

            // Premier graphique - Nombre de visiteurs par mois
            var ctx1 = document.getElementById('visitorChart').getContext('2d');

            // Fonction pour déterminer la couleur en fonction du nombre de visiteurs
            function getBarColor(visitorCount) 
            {
                if (visitorCount <= 100) 
                {
                    return '#28a745'; // Vert pour 1 à 100
                } 
                else if (visitorCount <= 500) 
                {
                    return '#4e73df'; // Bleu pour 101 à 500
                } 
                else 
                {
                    return '#e74a3b'; // Rouge pour plus de 500
                }
            }

            new Chart(ctx1, 
            {
                type: 'bar',
                data: 
                {
                    labels: data.visitor_graph.months,
                    datasets: [{
                        label: 'Visiteurs',
                        data: data.visitor_graph.visitor_counts,
                        backgroundColor: data.visitor_graph.visitor_counts.map(getBarColor), // Appliquer la couleur dynamique
                        borderColor: data.visitor_graph.visitor_counts.map(getBarColor), // Appliquer la couleur dynamique aux bordures aussi
                        borderWidth: 1
                    }]
                },
                options: 
                {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: 
                    {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Deuxième graphique - Pages visitées par mois
            var ctx2 = document.getElementById('pageChart').getContext('2d');

            // Créer les labels des mois
            var pageLabels = data.page_visits_graph.months;

            // Créer les datasets pour chaque page
            var pageData = data.page_visits_graph.page_names.map((page, index) => {
                var visits = data.page_visits_graph.page_visits_data.map((monthData) => {
                    return monthData[page] || 0; // Si aucune visite pour la page dans ce mois, mettre 0
                });

                // Calculer une teinte de base et générer des couleurs analogues
                const baseHue = (index * 360 / data.page_visits_graph.page_names.length) % 360; // Répartir les teintes
                const hueOffset = (index % 5) * 20 - 40; // Variation autour de la teinte de base (dans une plage de -40 à 40)
                const hue = (baseHue + hueOffset + 360) % 360; // Calcul de la teinte harmonieuse

                // Appliquer une saturation et luminosité constantes pour une palette harmonieuse
                const backgroundColor = `hsla(${hue}, 80%, 50%, 1)`; // Couleur semi-transparente
                const borderColor = `hsla(${hue}, 100%, 100%, 1)`; // Couleur pleine

                return {
                    label: page,
                    data: visits,
                    backgroundColor: backgroundColor,
                    borderColor: borderColor,
                    borderWidth: 1
                };
            });

            // Créer le graphique
            new Chart(ctx2, {
                type: 'bar',
                data: {
                    labels: pageLabels,
                    datasets: pageData
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        },
        error: function(xhr, status, error) {
            console.error('Erreur lors de la récupération des données :', error);
        }
    });
});
</script>

{% if flash_message %}
<script>
  (function () {
    toastr.options = {
      closeButton: true,
      progressBar: true,
      positionClass: "toast-top-right",
      timeOut: 4000
    };
    const type = "{{ flash_type|default('info') }}";
    const msg  = "{{ flash_message|e('js') }}";

    if (type === 'success') toastr.success(msg);
    else if (type === 'danger' || type === 'error') toastr.error(msg);
    else if (type === 'warning') toastr.warning(msg);
    else toastr.info(msg);
  })();
</script>
{% endif %}

<script>
$(function () {
  // ---- Etat courant du filtre pour export ----
  let currentLevel = 'SUCCESS';
  const limit = 10;

  // ---- Liens d'export basés sur l’état courant ----
  function refreshExportLinks() 
  {
    const base = '{{ url }}/admin/ajax/logs/export';
    $('#btnExportCsv').attr('href', `${base}?format=csv&level=${encodeURIComponent(currentLevel)}&limit=${limit}`);
    $('#btnExportJson').attr('href', `${base}?format=json&level=${encodeURIComponent(currentLevel)}&limit=${limit}`);
  }

  // ---- Charger les 10 derniers logs pour un niveau (POST, pas de query string) ----
    function loadLastLogs(level) {
      currentLevel = level;
      refreshExportLinks(); // tu peux la garder si elle fait autre chose
      $('#logsLastBody').html('<tr><td colspan="4" class="text-muted">Chargement…</td></tr>');

      $.ajax({
        url: '{{ url }}/admin/ajax/logs/last',
        type: 'POST',
        dataType: 'json',
        data: {
          level: level,
          limit: limit,
          // Optionnel : si tu as un token CSRF Twig dispo ici
          {% if csrf_token is defined %}
          csrf_token: '{{ csrf_token|e('js') }}'
          {% endif %}
        }
      })
      .done(function(res) {
        if (!res || !res.ok || !res.data || res.data.length === 0) {
          $('#logsLastBody').html('<tr><td colspan="4" class="text-muted">Aucun log trouvé.</td></tr>');
          return;
        }
        const rows = res.data.map(function(item) {
          const id = item.ID ?? '';
          const lvl = item.LEVEL ?? '';
          const cat = item.CATEGORY ?? '';
          const msg = escapeHtml(item.MESSAGE ?? '');
          return `
            <tr>
              <td>${id}</td>
              <td><span class="badge ${badgeByLevel(lvl)}">${lvl}</span></td>
              <td>${cat}</td>
              <td>${msg}</td>
            </tr>`;
        }).join('');
        $('#logsLastBody').html(rows);
      })
      .fail(function() {
        $('#logsLastBody').html('<tr><td colspan="4" class="text-danger">Erreur de chargement.</td></tr>');
        if (window.toastr) {
          toastr.options = { closeButton:true, progressBar:true, timeOut:5000 };
          toastr.error('Impossible de charger les logs.');
        }
      });
    }
  // ---- Camembert des niveaux ----
  function loadLogsSummary() {
      $.getJSON('{{ url }}/admin/ajax/logs/summary')
        .done(function(res) {
          if (!res.ok || !res.counts) return;

          const labels = Object.keys(res.counts);            // ex: ["DEBUG","INFO","WARNING","ERROR","CRITICAL"]
          const values = labels.map(k => res.counts[k]);

          // Palette cohérente avec tes badges Bootstrap
          const levelColors = {
            'SUCCESS':  '#198754', //success
            'DEBUG':    '#6c757d', // secondary
            'INFO':     '#0dcaf0', // info
            'WARNING':  '#ffc107', // warning
            'ERROR':    '#dc3545', // danger
            'CRITICAL': '#842029'  // danger foncé (critique)
          };

          const backgroundColors = labels.map(l => levelColors[l] || '#adb5bd');
          const borderColors     = labels.map(() => '#ffffff');

          const ctx = document.getElementById('logsPie').getContext('2d');
          new Chart(ctx, {
            type: 'pie',
            data: {
              labels: labels,
              datasets: [{
                data: values,
                backgroundColor: backgroundColors,
                borderColor: borderColors,
                borderWidth: 2
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'top',
                  labels: { usePointStyle: true }
                },
                tooltip: {
                  callbacks: {
                    label: function(context) {
                      const total = context.dataset.data.reduce((a,b)=>a+b,0) || 1;
                      const val   = context.parsed || 0;
                      const pct   = ((val/total)*100).toFixed(1);
                      return ` ${context.label}: ${val} (${pct}%)`;
                    }
                  }
                }
              }
            }
          });
        })
        .fail(function() {
          if (window.toastr) {
            toastr.options = { closeButton:true, progressBar:true, timeOut:5000 };
            toastr.error('Impossible de charger la répartition des logs.');
          }
        });
    }

  // ---- Helpers ----
  function badgeByLevel(level) 
  {
    switch (String(level).toUpperCase()) 
    {
      case 'SUCCESS':  return 'bg-success';
      case 'CRITICAL': return 'bg-danger';
      case 'ERROR':    return 'bg-danger';
      case 'WARNING':  return 'bg-warning text-dark';
      case 'INFO':     return 'bg-info text-dark';
      case 'DEBUG':    return 'bg-secondary';
      default:         return 'bg-light text-dark';
    }
  }
  function escapeHtml(str) 
  {
    return String(str).replace(/[&<>"']/g, s => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#039;'}[s]));
  }

  // ---- Tabs niveau ----
  $('#logsLevelTabs').on('click', 'button[data-level]', function() {
    $('#logsLevelTabs .nav-link').removeClass('active');
    $(this).addClass('active');
    loadLastLogs($(this).data('level'));
  });

  // Init
  refreshExportLinks();
  loadLastLogs(currentLevel);
  loadLogsSummary();
});
</script>
{% endblock %}
